schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "todo_list"
  """
  delete_todo_list(
    """filter the rows which have to be deleted"""
    where: todo_list_bool_exp!
  ): todo_list_mutation_response

  """
  delete single row from the table: "todo_list"
  """
  delete_todo_list_by_pk(id: uuid!): todo_list

  """
  insert data into the table: "todo_list"
  """
  insert_todo_list(
    """the rows to be inserted"""
    objects: [todo_list_insert_input!]!

    """on conflict condition"""
    on_conflict: todo_list_on_conflict
  ): todo_list_mutation_response

  """
  insert a single row into the table: "todo_list"
  """
  insert_todo_list_one(
    """the row to be inserted"""
    object: todo_list_insert_input!

    """on conflict condition"""
    on_conflict: todo_list_on_conflict
  ): todo_list

  """
  update data of the table: "todo_list"
  """
  update_todo_list(
    """sets the columns of the filtered rows to the given values"""
    _set: todo_list_set_input

    """filter the rows which have to be updated"""
    where: todo_list_bool_exp!
  ): todo_list_mutation_response

  """
  update single row of the table: "todo_list"
  """
  update_todo_list_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: todo_list_set_input
    pk_columns: todo_list_pk_columns_input!
  ): todo_list
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "todo_list"
  """
  todo_list(
    """distinct select on columns"""
    distinct_on: [todo_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_list_order_by!]

    """filter the rows returned"""
    where: todo_list_bool_exp
  ): [todo_list!]!

  """
  fetch aggregated fields from the table: "todo_list"
  """
  todo_list_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_list_order_by!]

    """filter the rows returned"""
    where: todo_list_bool_exp
  ): todo_list_aggregate!

  """fetch data from the table: "todo_list" using primary key columns"""
  todo_list_by_pk(id: uuid!): todo_list
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "todo_list"
  """
  todo_list(
    """distinct select on columns"""
    distinct_on: [todo_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_list_order_by!]

    """filter the rows returned"""
    where: todo_list_bool_exp
  ): [todo_list!]!

  """
  fetch aggregated fields from the table: "todo_list"
  """
  todo_list_aggregate(
    """distinct select on columns"""
    distinct_on: [todo_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_list_order_by!]

    """filter the rows returned"""
    where: todo_list_bool_exp
  ): todo_list_aggregate!

  """fetch data from the table: "todo_list" using primary key columns"""
  todo_list_by_pk(id: uuid!): todo_list
}

"""
columns and relationships of "todo_list"
"""
type todo_list {
  completed: Boolean!
  id: uuid!
  title: String!
}

"""
aggregated selection of "todo_list"
"""
type todo_list_aggregate {
  aggregate: todo_list_aggregate_fields
  nodes: [todo_list!]!
}

"""
aggregate fields of "todo_list"
"""
type todo_list_aggregate_fields {
  count(columns: [todo_list_select_column!], distinct: Boolean): Int
  max: todo_list_max_fields
  min: todo_list_min_fields
}

"""
order by aggregate values of table "todo_list"
"""
input todo_list_aggregate_order_by {
  count: order_by
  max: todo_list_max_order_by
  min: todo_list_min_order_by
}

"""
input type for inserting array relation for remote table "todo_list"
"""
input todo_list_arr_rel_insert_input {
  data: [todo_list_insert_input!]!
  on_conflict: todo_list_on_conflict
}

"""
Boolean expression to filter rows from the table "todo_list". All fields are combined with a logical 'AND'.
"""
input todo_list_bool_exp {
  _and: [todo_list_bool_exp]
  _not: todo_list_bool_exp
  _or: [todo_list_bool_exp]
  completed: Boolean_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "todo_list"
"""
enum todo_list_constraint {
  """unique or primary key constraint"""
  todo_list_pkey
}

"""
input type for inserting data into table "todo_list"
"""
input todo_list_insert_input {
  completed: Boolean
  id: uuid
  title: String
}

"""aggregate max on columns"""
type todo_list_max_fields {
  id: uuid
  title: String
}

"""
order by max() on columns of table "todo_list"
"""
input todo_list_max_order_by {
  id: order_by
  title: order_by
}

"""aggregate min on columns"""
type todo_list_min_fields {
  id: uuid
  title: String
}

"""
order by min() on columns of table "todo_list"
"""
input todo_list_min_order_by {
  id: order_by
  title: order_by
}

"""
response of any mutation on the table "todo_list"
"""
type todo_list_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [todo_list!]!
}

"""
input type for inserting object relation for remote table "todo_list"
"""
input todo_list_obj_rel_insert_input {
  data: todo_list_insert_input!
  on_conflict: todo_list_on_conflict
}

"""
on conflict condition type for table "todo_list"
"""
input todo_list_on_conflict {
  constraint: todo_list_constraint!
  update_columns: [todo_list_update_column!]!
  where: todo_list_bool_exp
}

"""
ordering options when selecting data from "todo_list"
"""
input todo_list_order_by {
  completed: order_by
  id: order_by
  title: order_by
}

"""
primary key columns input for table: "todo_list"
"""
input todo_list_pk_columns_input {
  id: uuid!
}

"""
select columns of table "todo_list"
"""
enum todo_list_select_column {
  """column name"""
  completed

  """column name"""
  id

  """column name"""
  title
}

"""
input type for updating data in table "todo_list"
"""
input todo_list_set_input {
  completed: Boolean
  id: uuid
  title: String
}

"""
update columns of table "todo_list"
"""
enum todo_list_update_column {
  """column name"""
  completed

  """column name"""
  id

  """column name"""
  title
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

